datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    mealPlans     MealPlan[]
    dailyMacros   DailyMacro[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
    id          String       @id @default(cuid())
    name        String
    description String?
    ingredients Ingredient[]
    mealPlans   MealPlan[]
}

model Ingredient {
    id       String @id @default(cuid())
    name     String
    amount   Float
    unit     String
    calories Float
    protein  Float
    carbs    Float
    fat      Float
    recipeId String
    recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model MealPlan {
    id        String   @id @default(cuid())
    name      String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    recipes   Recipe[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DailyMacro {
    id       String   @id @default(cuid())
    date     DateTime
    calories Float
    protein  Float
    carbs    Float
    fat      Float
    userId   String
    user     User     @relation(fields: [userId], references: [id])
}
